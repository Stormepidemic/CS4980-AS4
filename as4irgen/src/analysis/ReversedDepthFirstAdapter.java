/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import java.util.*;
import node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        {
            List<PClassDecl> copy = new ArrayList<PClassDecl>(node.getClassDecl());
            Collections.reverse(copy);
            for(PClassDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getMainClass() != null)
        {
            node.getMainClass().apply(this);
        }
        outAProgram(node);
    }

    public void inAMainClass(AMainClass node)
    {
        defaultIn(node);
    }

    public void outAMainClass(AMainClass node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainClass(AMainClass node)
    {
        inAMainClass(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        if(node.getMainDef() != null)
        {
            node.getMainDef().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getClas() != null)
        {
            node.getClas().apply(this);
        }
        outAMainClass(node);
    }

    public void inAMainDef(AMainDef node)
    {
        defaultIn(node);
    }

    public void outAMainDef(AMainDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMainDef(AMainDef node)
    {
        inAMainDef(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getMain() != null)
        {
            node.getMain().apply(this);
        }
        if(node.getVoid() != null)
        {
            node.getVoid().apply(this);
        }
        if(node.getStatic() != null)
        {
            node.getStatic().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAMainDef(node);
    }

    public void inABaseclassClassDecl(ABaseclassClassDecl node)
    {
        defaultIn(node);
    }

    public void outABaseclassClassDecl(ABaseclassClassDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABaseclassClassDecl(ABaseclassClassDecl node)
    {
        inABaseclassClassDecl(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        {
            List<PMethodDecl> copy = new ArrayList<PMethodDecl>(node.getMethodDecl());
            Collections.reverse(copy);
            for(PMethodDecl e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PClassVarDecl> copy = new ArrayList<PClassVarDecl>(node.getClassVarDecl());
            Collections.reverse(copy);
            for(PClassVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getClas() != null)
        {
            node.getClas().apply(this);
        }
        outABaseclassClassDecl(node);
    }

    public void inAClassVarDecl(AClassVarDecl node)
    {
        defaultIn(node);
    }

    public void outAClassVarDecl(AClassVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassVarDecl(AClassVarDecl node)
    {
        inAClassVarDecl(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outAClassVarDecl(node);
    }

    public void inALocalVarDecl(ALocalVarDecl node)
    {
        defaultIn(node);
    }

    public void outALocalVarDecl(ALocalVarDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalVarDecl(ALocalVarDecl node)
    {
        inALocalVarDecl(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outALocalVarDecl(node);
    }

    public void inAMethodDecl(AMethodDecl node)
    {
        defaultIn(node);
    }

    public void outAMethodDecl(AMethodDecl node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodDecl(AMethodDecl node)
    {
        inAMethodDecl(node);
        if(node.getMethodBody() != null)
        {
            node.getMethodBody().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getFormalList() != null)
        {
            node.getFormalList().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getPublic() != null)
        {
            node.getPublic().apply(this);
        }
        outAMethodDecl(node);
    }

    public void inAMethodBody(AMethodBody node)
    {
        defaultIn(node);
    }

    public void outAMethodBody(AMethodBody node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMethodBody(AMethodBody node)
    {
        inAMethodBody(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PLocalVarDecl> copy = new ArrayList<PLocalVarDecl>(node.getLocalVarDecl());
            Collections.reverse(copy);
            for(PLocalVarDecl e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        outAMethodBody(node);
    }

    public void inAEmptyFormalList(AEmptyFormalList node)
    {
        defaultIn(node);
    }

    public void outAEmptyFormalList(AEmptyFormalList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyFormalList(AEmptyFormalList node)
    {
        inAEmptyFormalList(node);
        outAEmptyFormalList(node);
    }

    public void inANonemptyFormalList(ANonemptyFormalList node)
    {
        defaultIn(node);
    }

    public void outANonemptyFormalList(ANonemptyFormalList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonemptyFormalList(ANonemptyFormalList node)
    {
        inANonemptyFormalList(node);
        if(node.getFormalRest() != null)
        {
            node.getFormalRest().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        outANonemptyFormalList(node);
    }

    public void inAEmptyFormalRest(AEmptyFormalRest node)
    {
        defaultIn(node);
    }

    public void outAEmptyFormalRest(AEmptyFormalRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyFormalRest(AEmptyFormalRest node)
    {
        inAEmptyFormalRest(node);
        outAEmptyFormalRest(node);
    }

    public void inANonemptyFormalRest(ANonemptyFormalRest node)
    {
        defaultIn(node);
    }

    public void outANonemptyFormalRest(ANonemptyFormalRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANonemptyFormalRest(ANonemptyFormalRest node)
    {
        inANonemptyFormalRest(node);
        if(node.getFormalRest() != null)
        {
            node.getFormalRest().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getType() != null)
        {
            node.getType().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outANonemptyFormalRest(node);
    }

    public void inAArrayType(AArrayType node)
    {
        defaultIn(node);
    }

    public void outAArrayType(AArrayType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayType(AArrayType node)
    {
        inAArrayType(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAArrayType(node);
    }

    public void inABoolType(ABoolType node)
    {
        defaultIn(node);
    }

    public void outABoolType(ABoolType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABoolType(ABoolType node)
    {
        inABoolType(node);
        if(node.getBoolean() != null)
        {
            node.getBoolean().apply(this);
        }
        outABoolType(node);
    }

    public void inAIntType(AIntType node)
    {
        defaultIn(node);
    }

    public void outAIntType(AIntType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntType(AIntType node)
    {
        inAIntType(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntType(node);
    }

    public void inAClassType(AClassType node)
    {
        defaultIn(node);
    }

    public void outAClassType(AClassType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAClassType(AClassType node)
    {
        inAClassType(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAClassType(node);
    }

    public void inAIfoneStatement(AIfoneStatement node)
    {
        defaultIn(node);
    }

    public void outAIfoneStatement(AIfoneStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfoneStatement(AIfoneStatement node)
    {
        inAIfoneStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfoneStatement(node);
    }

    public void inAIfStatement(AIfStatement node)
    {
        defaultIn(node);
    }

    public void outAIfStatement(AIfStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStatement(AIfStatement node)
    {
        inAIfStatement(node);
        if(node.getFalsepart() != null)
        {
            node.getFalsepart().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getTruepart() != null)
        {
            node.getTruepart().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStatement(node);
    }

    public void inAWhileStatement(AWhileStatement node)
    {
        defaultIn(node);
    }

    public void outAWhileStatement(AWhileStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStatement(AWhileStatement node)
    {
        inAWhileStatement(node);
        if(node.getStatement() != null)
        {
            node.getStatement().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileStatement(node);
    }

    public void inASimpleStatement(ASimpleStatement node)
    {
        defaultIn(node);
    }

    public void outASimpleStatement(ASimpleStatement node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleStatement(ASimpleStatement node)
    {
        inASimpleStatement(node);
        if(node.getSimpleStmt() != null)
        {
            node.getSimpleStmt().apply(this);
        }
        outASimpleStatement(node);
    }

    public void inAPrintSimpleStmt(APrintSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAPrintSimpleStmt(APrintSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPrintSimpleStmt(APrintSimpleStmt node)
    {
        inAPrintSimpleStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getPrintln() != null)
        {
            node.getPrintln().apply(this);
        }
        outAPrintSimpleStmt(node);
    }

    public void inAAssignSimpleStmt(AAssignSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignSimpleStmt(AAssignSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignSimpleStmt(AAssignSimpleStmt node)
    {
        inAAssignSimpleStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAssignSimpleStmt(node);
    }

    public void inAArraySimpleStmt(AArraySimpleStmt node)
    {
        defaultIn(node);
    }

    public void outAArraySimpleStmt(AArraySimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArraySimpleStmt(AArraySimpleStmt node)
    {
        inAArraySimpleStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getEqual() != null)
        {
            node.getEqual().apply(this);
        }
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAArraySimpleStmt(node);
    }

    public void inANestedSimpleStmt(ANestedSimpleStmt node)
    {
        defaultIn(node);
    }

    public void outANestedSimpleStmt(ANestedSimpleStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedSimpleStmt(ANestedSimpleStmt node)
    {
        inANestedSimpleStmt(node);
        if(node.getRbrace() != null)
        {
            node.getRbrace().apply(this);
        }
        {
            List<PStatement> copy = new ArrayList<PStatement>(node.getStatement());
            Collections.reverse(copy);
            for(PStatement e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLbrace() != null)
        {
            node.getLbrace().apply(this);
        }
        outANestedSimpleStmt(node);
    }

    public void inASansTrailerStmtAllPaired(ASansTrailerStmtAllPaired node)
    {
        defaultIn(node);
    }

    public void outASansTrailerStmtAllPaired(ASansTrailerStmtAllPaired node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASansTrailerStmtAllPaired(ASansTrailerStmtAllPaired node)
    {
        inASansTrailerStmtAllPaired(node);
        if(node.getSimpleStmt() != null)
        {
            node.getSimpleStmt().apply(this);
        }
        outASansTrailerStmtAllPaired(node);
    }

    public void inAWhileStmtAllPaired(AWhileStmtAllPaired node)
    {
        defaultIn(node);
    }

    public void outAWhileStmtAllPaired(AWhileStmtAllPaired node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmtAllPaired(AWhileStmtAllPaired node)
    {
        inAWhileStmtAllPaired(node);
        if(node.getStmtAllPaired() != null)
        {
            node.getStmtAllPaired().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileStmtAllPaired(node);
    }

    public void inAIfStmtAllPaired(AIfStmtAllPaired node)
    {
        defaultIn(node);
    }

    public void outAIfStmtAllPaired(AIfStmtAllPaired node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtAllPaired(AIfStmtAllPaired node)
    {
        inAIfStmtAllPaired(node);
        if(node.getFalsepart() != null)
        {
            node.getFalsepart().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getTruepart() != null)
        {
            node.getTruepart().apply(this);
        }
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfStmtAllPaired(node);
    }

    public void inAExp(AExp node)
    {
        defaultIn(node);
    }

    public void outAExp(AExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExp(AExp node)
    {
        inAExp(node);
        if(node.getAndExp() != null)
        {
            node.getAndExp().apply(this);
        }
        outAExp(node);
    }

    public void inASimpleAndExp(ASimpleAndExp node)
    {
        defaultIn(node);
    }

    public void outASimpleAndExp(ASimpleAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleAndExp(ASimpleAndExp node)
    {
        inASimpleAndExp(node);
        if(node.getComparison() != null)
        {
            node.getComparison().apply(this);
        }
        outASimpleAndExp(node);
    }

    public void inAAndAndExp(AAndAndExp node)
    {
        defaultIn(node);
    }

    public void outAAndAndExp(AAndAndExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndAndExp(AAndAndExp node)
    {
        inAAndAndExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndAndExp(node);
    }

    public void inASimpleComparison(ASimpleComparison node)
    {
        defaultIn(node);
    }

    public void outASimpleComparison(ASimpleComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleComparison(ASimpleComparison node)
    {
        inASimpleComparison(node);
        if(node.getArithExp() != null)
        {
            node.getArithExp().apply(this);
        }
        outASimpleComparison(node);
    }

    public void inACompareComparison(ACompareComparison node)
    {
        defaultIn(node);
    }

    public void outACompareComparison(ACompareComparison node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACompareComparison(ACompareComparison node)
    {
        inACompareComparison(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLess() != null)
        {
            node.getLess().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outACompareComparison(node);
    }

    public void inASimpleArithExp(ASimpleArithExp node)
    {
        defaultIn(node);
    }

    public void outASimpleArithExp(ASimpleArithExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleArithExp(ASimpleArithExp node)
    {
        inASimpleArithExp(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outASimpleArithExp(node);
    }

    public void inAAddArithExp(AAddArithExp node)
    {
        defaultIn(node);
    }

    public void outAAddArithExp(AAddArithExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddArithExp(AAddArithExp node)
    {
        inAAddArithExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAddArithExp(node);
    }

    public void inASubtArithExp(ASubtArithExp node)
    {
        defaultIn(node);
    }

    public void outASubtArithExp(ASubtArithExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubtArithExp(ASubtArithExp node)
    {
        inASubtArithExp(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outASubtArithExp(node);
    }

    public void inASimpleTerm(ASimpleTerm node)
    {
        defaultIn(node);
    }

    public void outASimpleTerm(ASimpleTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleTerm(ASimpleTerm node)
    {
        inASimpleTerm(node);
        if(node.getBoolExp() != null)
        {
            node.getBoolExp().apply(this);
        }
        outASimpleTerm(node);
    }

    public void inATimesTerm(ATimesTerm node)
    {
        defaultIn(node);
    }

    public void outATimesTerm(ATimesTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATimesTerm(ATimesTerm node)
    {
        inATimesTerm(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outATimesTerm(node);
    }

    public void inASimpleBoolExp(ASimpleBoolExp node)
    {
        defaultIn(node);
    }

    public void outASimpleBoolExp(ASimpleBoolExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleBoolExp(ASimpleBoolExp node)
    {
        inASimpleBoolExp(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outASimpleBoolExp(node);
    }

    public void inANotBoolExp(ANotBoolExp node)
    {
        defaultIn(node);
    }

    public void outANotBoolExp(ANotBoolExp node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotBoolExp(ANotBoolExp node)
    {
        inANotBoolExp(node);
        if(node.getBoolExp() != null)
        {
            node.getBoolExp().apply(this);
        }
        if(node.getBang() != null)
        {
            node.getBang().apply(this);
        }
        outANotBoolExp(node);
    }

    public void inAArrayFactor(AArrayFactor node)
    {
        defaultIn(node);
    }

    public void outAArrayFactor(AArrayFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayFactor(AArrayFactor node)
    {
        inAArrayFactor(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getIndex() != null)
        {
            node.getIndex().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAArrayFactor(node);
    }

    public void inACallFactor(ACallFactor node)
    {
        defaultIn(node);
    }

    public void outACallFactor(ACallFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACallFactor(ACallFactor node)
    {
        inACallFactor(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExpList() != null)
        {
            node.getExpList().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getDot() != null)
        {
            node.getDot().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outACallFactor(node);
    }

    public void inANumFactor(ANumFactor node)
    {
        defaultIn(node);
    }

    public void outANumFactor(ANumFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANumFactor(ANumFactor node)
    {
        inANumFactor(node);
        if(node.getNumber() != null)
        {
            node.getNumber().apply(this);
        }
        outANumFactor(node);
    }

    public void inATrueFactor(ATrueFactor node)
    {
        defaultIn(node);
    }

    public void outATrueFactor(ATrueFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATrueFactor(ATrueFactor node)
    {
        inATrueFactor(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outATrueFactor(node);
    }

    public void inAFalseFactor(AFalseFactor node)
    {
        defaultIn(node);
    }

    public void outAFalseFactor(AFalseFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFalseFactor(AFalseFactor node)
    {
        inAFalseFactor(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAFalseFactor(node);
    }

    public void inAIdFactor(AIdFactor node)
    {
        defaultIn(node);
    }

    public void outAIdFactor(AIdFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdFactor(AIdFactor node)
    {
        inAIdFactor(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAIdFactor(node);
    }

    public void inAThisFactor(AThisFactor node)
    {
        defaultIn(node);
    }

    public void outAThisFactor(AThisFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAThisFactor(AThisFactor node)
    {
        inAThisFactor(node);
        if(node.getThis() != null)
        {
            node.getThis().apply(this);
        }
        outAThisFactor(node);
    }

    public void inANewarrayFactor(ANewarrayFactor node)
    {
        defaultIn(node);
    }

    public void outANewarrayFactor(ANewarrayFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewarrayFactor(ANewarrayFactor node)
    {
        inANewarrayFactor(node);
        if(node.getRbracket() != null)
        {
            node.getRbracket().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLbracket() != null)
        {
            node.getLbracket().apply(this);
        }
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outANewarrayFactor(node);
    }

    public void inANewobjFactor(ANewobjFactor node)
    {
        defaultIn(node);
    }

    public void outANewobjFactor(ANewobjFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANewobjFactor(ANewobjFactor node)
    {
        inANewobjFactor(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getNew() != null)
        {
            node.getNew().apply(this);
        }
        outANewobjFactor(node);
    }

    public void inANestedFactor(ANestedFactor node)
    {
        defaultIn(node);
    }

    public void outANestedFactor(ANestedFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANestedFactor(ANestedFactor node)
    {
        inANestedFactor(node);
        if(node.getRparen() != null)
        {
            node.getRparen().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getLparen() != null)
        {
            node.getLparen().apply(this);
        }
        outANestedFactor(node);
    }

    public void inAEmptyExpList(AEmptyExpList node)
    {
        defaultIn(node);
    }

    public void outAEmptyExpList(AEmptyExpList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyExpList(AEmptyExpList node)
    {
        inAEmptyExpList(node);
        outAEmptyExpList(node);
    }

    public void inAExpsExpList(AExpsExpList node)
    {
        defaultIn(node);
    }

    public void outAExpsExpList(AExpsExpList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpsExpList(AExpsExpList node)
    {
        inAExpsExpList(node);
        if(node.getExpRest() != null)
        {
            node.getExpRest().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        outAExpsExpList(node);
    }

    public void inAEmptyExpRest(AEmptyExpRest node)
    {
        defaultIn(node);
    }

    public void outAEmptyExpRest(AEmptyExpRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEmptyExpRest(AEmptyExpRest node)
    {
        inAEmptyExpRest(node);
        outAEmptyExpRest(node);
    }

    public void inAExpsExpRest(AExpsExpRest node)
    {
        defaultIn(node);
    }

    public void outAExpsExpRest(AExpsExpRest node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpsExpRest(AExpsExpRest node)
    {
        inAExpsExpRest(node);
        if(node.getExpRest() != null)
        {
            node.getExpRest().apply(this);
        }
        if(node.getExp() != null)
        {
            node.getExp().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        outAExpsExpRest(node);
    }
}
