/* This file was generated by SableCC (http://www.sablecc.org/). */

package analysis;

import node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAMainClass(AMainClass node);
    void caseAMainDef(AMainDef node);
    void caseABaseclassClassDecl(ABaseclassClassDecl node);
    void caseAClassVarDecl(AClassVarDecl node);
    void caseALocalVarDecl(ALocalVarDecl node);
    void caseAMethodDecl(AMethodDecl node);
    void caseAMethodBody(AMethodBody node);
    void caseAEmptyFormalList(AEmptyFormalList node);
    void caseANonemptyFormalList(ANonemptyFormalList node);
    void caseAEmptyFormalRest(AEmptyFormalRest node);
    void caseANonemptyFormalRest(ANonemptyFormalRest node);
    void caseAArrayType(AArrayType node);
    void caseABoolType(ABoolType node);
    void caseAIntType(AIntType node);
    void caseAClassType(AClassType node);
    void caseAIfoneStatement(AIfoneStatement node);
    void caseAIfStatement(AIfStatement node);
    void caseAWhileStatement(AWhileStatement node);
    void caseASimpleStatement(ASimpleStatement node);
    void caseAPrintSimpleStmt(APrintSimpleStmt node);
    void caseAAssignSimpleStmt(AAssignSimpleStmt node);
    void caseAArraySimpleStmt(AArraySimpleStmt node);
    void caseANestedSimpleStmt(ANestedSimpleStmt node);
    void caseASansTrailerStmtAllPaired(ASansTrailerStmtAllPaired node);
    void caseAWhileStmtAllPaired(AWhileStmtAllPaired node);
    void caseAIfStmtAllPaired(AIfStmtAllPaired node);
    void caseAExp(AExp node);
    void caseASimpleAndExp(ASimpleAndExp node);
    void caseAAndAndExp(AAndAndExp node);
    void caseASimpleComparison(ASimpleComparison node);
    void caseACompareComparison(ACompareComparison node);
    void caseASimpleArithExp(ASimpleArithExp node);
    void caseAAddArithExp(AAddArithExp node);
    void caseASubtArithExp(ASubtArithExp node);
    void caseASimpleTerm(ASimpleTerm node);
    void caseATimesTerm(ATimesTerm node);
    void caseASimpleBoolExp(ASimpleBoolExp node);
    void caseANotBoolExp(ANotBoolExp node);
    void caseAArrayFactor(AArrayFactor node);
    void caseACallFactor(ACallFactor node);
    void caseANumFactor(ANumFactor node);
    void caseATrueFactor(ATrueFactor node);
    void caseAFalseFactor(AFalseFactor node);
    void caseAIdFactor(AIdFactor node);
    void caseAThisFactor(AThisFactor node);
    void caseANewarrayFactor(ANewarrayFactor node);
    void caseANewobjFactor(ANewobjFactor node);
    void caseANestedFactor(ANestedFactor node);
    void caseAEmptyExpList(AEmptyExpList node);
    void caseAExpsExpList(AExpsExpList node);
    void caseAEmptyExpRest(AEmptyExpRest node);
    void caseAExpsExpRest(AExpsExpRest node);

    void caseTBoolean(TBoolean node);
    void caseTClas(TClas node);
    void caseTElse(TElse node);
    void caseTFalse(TFalse node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTMain(TMain node);
    void caseTNew(TNew node);
    void caseTPrintln(TPrintln node);
    void caseTPublic(TPublic node);
    void caseTReturn(TReturn node);
    void caseTStatic(TStatic node);
    void caseTString(TString node);
    void caseTThis(TThis node);
    void caseTTrue(TTrue node);
    void caseTVoid(TVoid node);
    void caseTWhile(TWhile node);
    void caseTLbracket(TLbracket node);
    void caseTRbracket(TRbracket node);
    void caseTSemi(TSemi node);
    void caseTLparen(TLparen node);
    void caseTRparen(TRparen node);
    void caseTLbrace(TLbrace node);
    void caseTRbrace(TRbrace node);
    void caseTEqual(TEqual node);
    void caseTDot(TDot node);
    void caseTBang(TBang node);
    void caseTComma(TComma node);
    void caseTPlus(TPlus node);
    void caseTAnd(TAnd node);
    void caseTLess(TLess node);
    void caseTMinus(TMinus node);
    void caseTStar(TStar node);
    void caseTId(TId node);
    void caseTNumber(TNumber node);
    void caseTWhitespace(TWhitespace node);
    void caseTLineComment(TLineComment node);
    void caseTSlashstarComment(TSlashstarComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
