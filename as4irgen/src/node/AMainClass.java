/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class AMainClass extends PMainClass
{
    private TClas _clas_;
    private TId _id_;
    private TLbrace _lbrace_;
    private PMainDef _mainDef_;
    private TRbrace _rbrace_;

    public AMainClass()
    {
        // Constructor
    }

    public AMainClass(
        @SuppressWarnings("hiding") TClas _clas_,
        @SuppressWarnings("hiding") TId _id_,
        @SuppressWarnings("hiding") TLbrace _lbrace_,
        @SuppressWarnings("hiding") PMainDef _mainDef_,
        @SuppressWarnings("hiding") TRbrace _rbrace_)
    {
        // Constructor
        setClas(_clas_);

        setId(_id_);

        setLbrace(_lbrace_);

        setMainDef(_mainDef_);

        setRbrace(_rbrace_);

    }

    @Override
    public Object clone()
    {
        return new AMainClass(
            cloneNode(this._clas_),
            cloneNode(this._id_),
            cloneNode(this._lbrace_),
            cloneNode(this._mainDef_),
            cloneNode(this._rbrace_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMainClass(this);
    }

    public TClas getClas()
    {
        return this._clas_;
    }

    public void setClas(TClas node)
    {
        if(this._clas_ != null)
        {
            this._clas_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._clas_ = node;
    }

    public TId getId()
    {
        return this._id_;
    }

    public void setId(TId node)
    {
        if(this._id_ != null)
        {
            this._id_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._id_ = node;
    }

    public TLbrace getLbrace()
    {
        return this._lbrace_;
    }

    public void setLbrace(TLbrace node)
    {
        if(this._lbrace_ != null)
        {
            this._lbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lbrace_ = node;
    }

    public PMainDef getMainDef()
    {
        return this._mainDef_;
    }

    public void setMainDef(PMainDef node)
    {
        if(this._mainDef_ != null)
        {
            this._mainDef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mainDef_ = node;
    }

    public TRbrace getRbrace()
    {
        return this._rbrace_;
    }

    public void setRbrace(TRbrace node)
    {
        if(this._rbrace_ != null)
        {
            this._rbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rbrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._clas_)
            + toString(this._id_)
            + toString(this._lbrace_)
            + toString(this._mainDef_)
            + toString(this._rbrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._clas_ == child)
        {
            this._clas_ = null;
            return;
        }

        if(this._id_ == child)
        {
            this._id_ = null;
            return;
        }

        if(this._lbrace_ == child)
        {
            this._lbrace_ = null;
            return;
        }

        if(this._mainDef_ == child)
        {
            this._mainDef_ = null;
            return;
        }

        if(this._rbrace_ == child)
        {
            this._rbrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._clas_ == oldChild)
        {
            setClas((TClas) newChild);
            return;
        }

        if(this._id_ == oldChild)
        {
            setId((TId) newChild);
            return;
        }

        if(this._lbrace_ == oldChild)
        {
            setLbrace((TLbrace) newChild);
            return;
        }

        if(this._mainDef_ == oldChild)
        {
            setMainDef((PMainDef) newChild);
            return;
        }

        if(this._rbrace_ == oldChild)
        {
            setRbrace((TRbrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
