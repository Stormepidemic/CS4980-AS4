/* This file was generated by SableCC (http://www.sablecc.org/). */

package node;

import analysis.*;

@SuppressWarnings("nls")
public final class ANotBoolExp extends PBoolExp
{
    private TBang _bang_;
    private PBoolExp _boolExp_;

    public ANotBoolExp()
    {
        // Constructor
    }

    public ANotBoolExp(
        @SuppressWarnings("hiding") TBang _bang_,
        @SuppressWarnings("hiding") PBoolExp _boolExp_)
    {
        // Constructor
        setBang(_bang_);

        setBoolExp(_boolExp_);

    }

    @Override
    public Object clone()
    {
        return new ANotBoolExp(
            cloneNode(this._bang_),
            cloneNode(this._boolExp_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseANotBoolExp(this);
    }

    public TBang getBang()
    {
        return this._bang_;
    }

    public void setBang(TBang node)
    {
        if(this._bang_ != null)
        {
            this._bang_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bang_ = node;
    }

    public PBoolExp getBoolExp()
    {
        return this._boolExp_;
    }

    public void setBoolExp(PBoolExp node)
    {
        if(this._boolExp_ != null)
        {
            this._boolExp_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._boolExp_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._bang_)
            + toString(this._boolExp_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._bang_ == child)
        {
            this._bang_ = null;
            return;
        }

        if(this._boolExp_ == child)
        {
            this._boolExp_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._bang_ == oldChild)
        {
            setBang((TBang) newChild);
            return;
        }

        if(this._boolExp_ == oldChild)
        {
            setBoolExp((PBoolExp) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
