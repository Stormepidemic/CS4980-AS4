/* This file was generated by SableCC (http://www.sablecc.org/). */

package parser;

import lexer.*;
import node.*;
import analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAprogram1Program */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AAprogram2Program */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list, false);
            }
            break;
            case 2: /* reduce AMainClass */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AMainDef */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AAbaseclassclassdecl1ClassDecl */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AAbaseclassclassdecl2ClassDecl */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list, false);
            }
            break;
            case 6: /* reduce AAbaseclassclassdecl3ClassDecl */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AAbaseclassclassdecl4ClassDecl */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AClassVarDecl */
            {
                ArrayList<Object> list = new8();
                push(goTo(4), list, false);
            }
            break;
            case 9: /* reduce ALocalVarDecl */
            {
                ArrayList<Object> list = new9();
                push(goTo(5), list, false);
            }
            break;
            case 10: /* reduce AMethodDecl */
            {
                ArrayList<Object> list = new10();
                push(goTo(6), list, false);
            }
            break;
            case 11: /* reduce AAmethodbody1MethodBody */
            {
                ArrayList<Object> list = new11();
                push(goTo(7), list, false);
            }
            break;
            case 12: /* reduce AAmethodbody2MethodBody */
            {
                ArrayList<Object> list = new12();
                push(goTo(7), list, false);
            }
            break;
            case 13: /* reduce AAmethodbody3MethodBody */
            {
                ArrayList<Object> list = new13();
                push(goTo(7), list, false);
            }
            break;
            case 14: /* reduce AAmethodbody4MethodBody */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce AEmptyFormalList */
            {
                ArrayList<Object> list = new15();
                push(goTo(8), list, false);
            }
            break;
            case 16: /* reduce ANonemptyFormalList */
            {
                ArrayList<Object> list = new16();
                push(goTo(8), list, false);
            }
            break;
            case 17: /* reduce AEmptyFormalRest */
            {
                ArrayList<Object> list = new17();
                push(goTo(9), list, false);
            }
            break;
            case 18: /* reduce ANonemptyFormalRest */
            {
                ArrayList<Object> list = new18();
                push(goTo(9), list, false);
            }
            break;
            case 19: /* reduce AArrayType */
            {
                ArrayList<Object> list = new19();
                push(goTo(10), list, false);
            }
            break;
            case 20: /* reduce ABoolType */
            {
                ArrayList<Object> list = new20();
                push(goTo(10), list, false);
            }
            break;
            case 21: /* reduce AIntType */
            {
                ArrayList<Object> list = new21();
                push(goTo(10), list, false);
            }
            break;
            case 22: /* reduce AClassType */
            {
                ArrayList<Object> list = new22();
                push(goTo(10), list, false);
            }
            break;
            case 23: /* reduce AIfoneStatement */
            {
                ArrayList<Object> list = new23();
                push(goTo(11), list, false);
            }
            break;
            case 24: /* reduce AIfStatement */
            {
                ArrayList<Object> list = new24();
                push(goTo(11), list, false);
            }
            break;
            case 25: /* reduce AWhileStatement */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list, false);
            }
            break;
            case 26: /* reduce ASimpleStatement */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list, false);
            }
            break;
            case 27: /* reduce APrintSimpleStmt */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list, false);
            }
            break;
            case 28: /* reduce AAssignSimpleStmt */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list, false);
            }
            break;
            case 29: /* reduce AArraySimpleStmt */
            {
                ArrayList<Object> list = new29();
                push(goTo(12), list, false);
            }
            break;
            case 30: /* reduce AAnestedsimplestmt1SimpleStmt */
            {
                ArrayList<Object> list = new30();
                push(goTo(12), list, false);
            }
            break;
            case 31: /* reduce AAnestedsimplestmt2SimpleStmt */
            {
                ArrayList<Object> list = new31();
                push(goTo(12), list, false);
            }
            break;
            case 32: /* reduce ASansTrailerStmtAllPaired */
            {
                ArrayList<Object> list = new32();
                push(goTo(13), list, false);
            }
            break;
            case 33: /* reduce AWhileStmtAllPaired */
            {
                ArrayList<Object> list = new33();
                push(goTo(13), list, false);
            }
            break;
            case 34: /* reduce AIfStmtAllPaired */
            {
                ArrayList<Object> list = new34();
                push(goTo(13), list, false);
            }
            break;
            case 35: /* reduce AExp */
            {
                ArrayList<Object> list = new35();
                push(goTo(14), list, false);
            }
            break;
            case 36: /* reduce ASimpleAndExp */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list, false);
            }
            break;
            case 37: /* reduce AAndAndExp */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list, false);
            }
            break;
            case 38: /* reduce ASimpleComparison */
            {
                ArrayList<Object> list = new38();
                push(goTo(16), list, false);
            }
            break;
            case 39: /* reduce ACompareComparison */
            {
                ArrayList<Object> list = new39();
                push(goTo(16), list, false);
            }
            break;
            case 40: /* reduce ASimpleArithExp */
            {
                ArrayList<Object> list = new40();
                push(goTo(17), list, false);
            }
            break;
            case 41: /* reduce AAddArithExp */
            {
                ArrayList<Object> list = new41();
                push(goTo(17), list, false);
            }
            break;
            case 42: /* reduce ASubtArithExp */
            {
                ArrayList<Object> list = new42();
                push(goTo(17), list, false);
            }
            break;
            case 43: /* reduce ASimpleTerm */
            {
                ArrayList<Object> list = new43();
                push(goTo(18), list, false);
            }
            break;
            case 44: /* reduce ATimesTerm */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list, false);
            }
            break;
            case 45: /* reduce ASimpleBoolExp */
            {
                ArrayList<Object> list = new45();
                push(goTo(19), list, false);
            }
            break;
            case 46: /* reduce ANotBoolExp */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list, false);
            }
            break;
            case 47: /* reduce AArrayFactor */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list, false);
            }
            break;
            case 48: /* reduce ACallFactor */
            {
                ArrayList<Object> list = new48();
                push(goTo(20), list, false);
            }
            break;
            case 49: /* reduce ANumFactor */
            {
                ArrayList<Object> list = new49();
                push(goTo(20), list, false);
            }
            break;
            case 50: /* reduce ATrueFactor */
            {
                ArrayList<Object> list = new50();
                push(goTo(20), list, false);
            }
            break;
            case 51: /* reduce AFalseFactor */
            {
                ArrayList<Object> list = new51();
                push(goTo(20), list, false);
            }
            break;
            case 52: /* reduce AIdFactor */
            {
                ArrayList<Object> list = new52();
                push(goTo(20), list, false);
            }
            break;
            case 53: /* reduce AThisFactor */
            {
                ArrayList<Object> list = new53();
                push(goTo(20), list, false);
            }
            break;
            case 54: /* reduce ANewarrayFactor */
            {
                ArrayList<Object> list = new54();
                push(goTo(20), list, false);
            }
            break;
            case 55: /* reduce ANewobjFactor */
            {
                ArrayList<Object> list = new55();
                push(goTo(20), list, false);
            }
            break;
            case 56: /* reduce ANestedFactor */
            {
                ArrayList<Object> list = new56();
                push(goTo(20), list, false);
            }
            break;
            case 57: /* reduce AEmptyExpList */
            {
                ArrayList<Object> list = new57();
                push(goTo(21), list, false);
            }
            break;
            case 58: /* reduce AExpsExpList */
            {
                ArrayList<Object> list = new58();
                push(goTo(21), list, false);
            }
            break;
            case 59: /* reduce AEmptyExpRest */
            {
                ArrayList<Object> list = new59();
                push(goTo(22), list, false);
            }
            break;
            case 60: /* reduce AExpsExpRest */
            {
                ArrayList<Object> list = new60();
                push(goTo(22), list, false);
            }
            break;
            case 61: /* reduce ATerminal$ClassDecl */
            {
                ArrayList<Object> list = new61();
                push(goTo(23), list, true);
            }
            break;
            case 62: /* reduce ANonTerminal$ClassDecl */
            {
                ArrayList<Object> list = new62();
                push(goTo(23), list, true);
            }
            break;
            case 63: /* reduce ATerminal$ClassVarDecl */
            {
                ArrayList<Object> list = new63();
                push(goTo(24), list, true);
            }
            break;
            case 64: /* reduce ANonTerminal$ClassVarDecl */
            {
                ArrayList<Object> list = new64();
                push(goTo(24), list, true);
            }
            break;
            case 65: /* reduce ATerminal$MethodDecl */
            {
                ArrayList<Object> list = new65();
                push(goTo(25), list, true);
            }
            break;
            case 66: /* reduce ANonTerminal$MethodDecl */
            {
                ArrayList<Object> list = new66();
                push(goTo(25), list, true);
            }
            break;
            case 67: /* reduce ATerminal$LocalVarDecl */
            {
                ArrayList<Object> list = new67();
                push(goTo(26), list, true);
            }
            break;
            case 68: /* reduce ANonTerminal$LocalVarDecl */
            {
                ArrayList<Object> list = new68();
                push(goTo(26), list, true);
            }
            break;
            case 69: /* reduce ATerminal$Statement */
            {
                ArrayList<Object> list = new69();
                push(goTo(27), list, true);
            }
            break;
            case 70: /* reduce ANonTerminal$Statement */
            {
                ArrayList<Object> list = new70();
                push(goTo(27), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAprogram1Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainClass pmainclassNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pmainclassNode2 = (PMainClass)nodeArrayList1.get(0);
        {
            // Block
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode3);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAprogram2Program */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PMainClass pmainclassNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pmainclassNode2 = (PMainClass)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pprogramNode1 = new AProgram(pmainclassNode2, listNode4);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AMainClass */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMainClass pmainclassNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TLbrace tlbraceNode4;
        PMainDef pmaindefNode5;
        TRbrace trbraceNode6;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLbrace)nodeArrayList3.get(0);
        pmaindefNode5 = (PMainDef)nodeArrayList4.get(0);
        trbraceNode6 = (TRbrace)nodeArrayList5.get(0);

        pmainclassNode1 = new AMainClass(tclasNode2, tidNode3, tlbraceNode4, pmaindefNode5, trbraceNode6);
        }
	nodeList.add(pmainclassNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AMainDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList13 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList12 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList11 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMainDef pmaindefNode1;
        {
            // Block
        TPublic tpublicNode2;
        TStatic tstaticNode3;
        TVoid tvoidNode4;
        TMain tmainNode5;
        TLparen tlparenNode6;
        TString tstringNode7;
        TLbracket tlbracketNode8;
        TRbracket trbracketNode9;
        TId tidNode10;
        TRparen trparenNode11;
        TLbrace tlbraceNode12;
        PStatement pstatementNode13;
        TRbrace trbraceNode14;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        tstaticNode3 = (TStatic)nodeArrayList2.get(0);
        tvoidNode4 = (TVoid)nodeArrayList3.get(0);
        tmainNode5 = (TMain)nodeArrayList4.get(0);
        tlparenNode6 = (TLparen)nodeArrayList5.get(0);
        tstringNode7 = (TString)nodeArrayList6.get(0);
        tlbracketNode8 = (TLbracket)nodeArrayList7.get(0);
        trbracketNode9 = (TRbracket)nodeArrayList8.get(0);
        tidNode10 = (TId)nodeArrayList9.get(0);
        trparenNode11 = (TRparen)nodeArrayList10.get(0);
        tlbraceNode12 = (TLbrace)nodeArrayList11.get(0);
        pstatementNode13 = (PStatement)nodeArrayList12.get(0);
        trbraceNode14 = (TRbrace)nodeArrayList13.get(0);

        pmaindefNode1 = new AMainDef(tpublicNode2, tstaticNode3, tvoidNode4, tmainNode5, tlparenNode6, tstringNode7, tlbracketNode8, trbracketNode9, tidNode10, trparenNode11, tlbraceNode12, pstatementNode13, trbraceNode14);
        }
	nodeList.add(pmaindefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAbaseclassclassdecl1ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TLbrace tlbraceNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TRbrace trbraceNode7;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLbrace)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        }
        trbraceNode7 = (TRbrace)nodeArrayList4.get(0);

        pclassdeclNode1 = new ABaseclassClassDecl(tclasNode2, tidNode3, tlbraceNode4, listNode5, listNode6, trbraceNode7);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAbaseclassclassdecl2ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TLbrace tlbraceNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TRbrace trbraceNode8;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLbrace)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        }
        trbraceNode8 = (TRbrace)nodeArrayList5.get(0);

        pclassdeclNode1 = new ABaseclassClassDecl(tclasNode2, tidNode3, tlbraceNode4, listNode6, listNode7, trbraceNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAbaseclassclassdecl3ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TLbrace tlbraceNode4;
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        TRbrace trbraceNode8;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLbrace)nodeArrayList3.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        listNode6 = (LinkedList)nodeArrayList4.get(0);
	if(listNode6 != null)
	{
	  listNode7.addAll(listNode6);
	}
        }
        trbraceNode8 = (TRbrace)nodeArrayList5.get(0);

        pclassdeclNode1 = new ABaseclassClassDecl(tclasNode2, tidNode3, tlbraceNode4, listNode5, listNode7, trbraceNode8);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAbaseclassclassdecl4ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassDecl pclassdeclNode1;
        {
            // Block
        TClas tclasNode2;
        TId tidNode3;
        TLbrace tlbraceNode4;
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        LinkedList<Object> listNode8 = new LinkedList<Object>();
        TRbrace trbraceNode9;
        tclasNode2 = (TClas)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlbraceNode4 = (TLbrace)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList4.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        {
            // Block
        LinkedList<Object> listNode7 = new LinkedList<Object>();
        listNode7 = (LinkedList)nodeArrayList5.get(0);
	if(listNode7 != null)
	{
	  listNode8.addAll(listNode7);
	}
        }
        trbraceNode9 = (TRbrace)nodeArrayList6.get(0);

        pclassdeclNode1 = new ABaseclassClassDecl(tclasNode2, tidNode3, tlbraceNode4, listNode6, listNode8, trbraceNode9);
        }
	nodeList.add(pclassdeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AClassVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PClassVarDecl pclassvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TSemi tsemiNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        pclassvardeclNode1 = new AClassVarDecl(ptypeNode2, tidNode3, tsemiNode4);
        }
	nodeList.add(pclassvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ALocalVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalVarDecl plocalvardeclNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        TSemi tsemiNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        plocalvardeclNode1 = new ALocalVarDecl(ptypeNode2, tidNode3, tsemiNode4);
        }
	nodeList.add(plocalvardeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AMethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodDecl pmethoddeclNode1;
        {
            // Block
        TPublic tpublicNode2;
        PType ptypeNode3;
        TId tidNode4;
        TLparen tlparenNode5;
        PFormalList pformallistNode6;
        TRparen trparenNode7;
        PMethodBody pmethodbodyNode8;
        tpublicNode2 = (TPublic)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLparen)nodeArrayList4.get(0);
        pformallistNode6 = (PFormalList)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);
        pmethodbodyNode8 = (PMethodBody)nodeArrayList7.get(0);

        pmethoddeclNode1 = new AMethodDecl(tpublicNode2, ptypeNode3, tidNode4, tlparenNode5, pformallistNode6, trparenNode7, pmethodbodyNode8);
        }
	nodeList.add(pmethoddeclNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAmethodbody1MethodBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodBody pmethodbodyNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TReturn treturnNode5;
        PExp pexpNode6;
        TSemi tsemiNode7;
        TRbrace trbraceNode8;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }
        treturnNode5 = (TReturn)nodeArrayList2.get(0);
        pexpNode6 = (PExp)nodeArrayList3.get(0);
        tsemiNode7 = (TSemi)nodeArrayList4.get(0);
        trbraceNode8 = (TRbrace)nodeArrayList5.get(0);

        pmethodbodyNode1 = new AMethodBody(tlbraceNode2, listNode3, listNode4, treturnNode5, pexpNode6, tsemiNode7, trbraceNode8);
        }
	nodeList.add(pmethodbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAmethodbody2MethodBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodBody pmethodbodyNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TReturn treturnNode6;
        PExp pexpNode7;
        TSemi tsemiNode8;
        TRbrace trbraceNode9;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        }
        treturnNode6 = (TReturn)nodeArrayList3.get(0);
        pexpNode7 = (PExp)nodeArrayList4.get(0);
        tsemiNode8 = (TSemi)nodeArrayList5.get(0);
        trbraceNode9 = (TRbrace)nodeArrayList6.get(0);

        pmethodbodyNode1 = new AMethodBody(tlbraceNode2, listNode4, listNode5, treturnNode6, pexpNode7, tsemiNode8, trbraceNode9);
        }
	nodeList.add(pmethodbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AAmethodbody3MethodBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodBody pmethodbodyNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        TReturn treturnNode6;
        PExp pexpNode7;
        TSemi tsemiNode8;
        TRbrace trbraceNode9;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }
        treturnNode6 = (TReturn)nodeArrayList3.get(0);
        pexpNode7 = (PExp)nodeArrayList4.get(0);
        tsemiNode8 = (TSemi)nodeArrayList5.get(0);
        trbraceNode9 = (TRbrace)nodeArrayList6.get(0);

        pmethodbodyNode1 = new AMethodBody(tlbraceNode2, listNode3, listNode5, treturnNode6, pexpNode7, tsemiNode8, trbraceNode9);
        }
	nodeList.add(pmethodbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAmethodbody4MethodBody */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMethodBody pmethodbodyNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        TReturn treturnNode7;
        PExp pexpNode8;
        TSemi tsemiNode9;
        TRbrace trbraceNode10;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }
        treturnNode7 = (TReturn)nodeArrayList4.get(0);
        pexpNode8 = (PExp)nodeArrayList5.get(0);
        tsemiNode9 = (TSemi)nodeArrayList6.get(0);
        trbraceNode10 = (TRbrace)nodeArrayList7.get(0);

        pmethodbodyNode1 = new AMethodBody(tlbraceNode2, listNode4, listNode6, treturnNode7, pexpNode8, tsemiNode9, trbraceNode10);
        }
	nodeList.add(pmethodbodyNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AEmptyFormalList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFormalList pformallistNode1;
        {
            // Block

        pformallistNode1 = new AEmptyFormalList();
        }
	nodeList.add(pformallistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ANonemptyFormalList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormalList pformallistNode1;
        {
            // Block
        PType ptypeNode2;
        TId tidNode3;
        PFormalRest pformalrestNode4;
        ptypeNode2 = (PType)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        pformalrestNode4 = (PFormalRest)nodeArrayList3.get(0);

        pformallistNode1 = new ANonemptyFormalList(ptypeNode2, tidNode3, pformalrestNode4);
        }
	nodeList.add(pformallistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AEmptyFormalRest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFormalRest pformalrestNode1;
        {
            // Block

        pformalrestNode1 = new AEmptyFormalRest();
        }
	nodeList.add(pformalrestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ANonemptyFormalRest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFormalRest pformalrestNode1;
        {
            // Block
        TComma tcommaNode2;
        PType ptypeNode3;
        TId tidNode4;
        PFormalRest pformalrestNode5;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        ptypeNode3 = (PType)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        pformalrestNode5 = (PFormalRest)nodeArrayList4.get(0);

        pformalrestNode1 = new ANonemptyFormalRest(tcommaNode2, ptypeNode3, tidNode4, pformalrestNode5);
        }
	nodeList.add(pformalrestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AArrayType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        TLbracket tlbracketNode3;
        TRbracket trbracketNode4;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tlbracketNode3 = (TLbracket)nodeArrayList2.get(0);
        trbracketNode4 = (TRbracket)nodeArrayList3.get(0);

        ptypeNode1 = new AArrayType(tintNode2, tlbracketNode3, trbracketNode4);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ABoolType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TBoolean tbooleanNode2;
        tbooleanNode2 = (TBoolean)nodeArrayList1.get(0);

        ptypeNode1 = new ABoolType(tbooleanNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AIntType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        ptypeNode1 = new AIntType(tintNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AClassType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PType ptypeNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        ptypeNode1 = new AClassType(tidNode2);
        }
	nodeList.add(ptypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AIfoneStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        TLparen tlparenNode3;
        PExp pexpNode4;
        TRparen trparenNode5;
        PStatement pstatementNode6;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AIfoneStatement(tifNode2, tlparenNode3, pexpNode4, trparenNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AIfStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TIf tifNode2;
        TLparen tlparenNode3;
        PExp pexpNode4;
        TRparen trparenNode5;
        PStmtAllPaired pstmtallpairedNode6;
        TElse telseNode7;
        PStatement pstatementNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        pstmtallpairedNode6 = (PStmtAllPaired)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstatementNode8 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new AIfStatement(tifNode2, tlparenNode3, pexpNode4, trparenNode5, pstmtallpairedNode6, telseNode7, pstatementNode8);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AWhileStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        TWhile twhileNode2;
        TLparen tlparenNode3;
        PExp pexpNode4;
        TRparen trparenNode5;
        PStatement pstatementNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        pstatementNode6 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new AWhileStatement(twhileNode2, tlparenNode3, pexpNode4, trparenNode5, pstatementNode6);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ASimpleStatement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PSimpleStmt psimplestmtNode2;
        psimplestmtNode2 = (PSimpleStmt)nodeArrayList1.get(0);

        pstatementNode1 = new ASimpleStatement(psimplestmtNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce APrintSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TPrintln tprintlnNode2;
        TLparen tlparenNode3;
        PExp pexpNode4;
        TRparen trparenNode5;
        TSemi tsemiNode6;
        tprintlnNode2 = (TPrintln)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        tsemiNode6 = (TSemi)nodeArrayList5.get(0);

        psimplestmtNode1 = new APrintSimpleStmt(tprintlnNode2, tlparenNode3, pexpNode4, trparenNode5, tsemiNode6);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAssignSimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TId tidNode2;
        TEqual tequalNode3;
        PExp pexpNode4;
        TSemi tsemiNode5;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tequalNode3 = (TEqual)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        psimplestmtNode1 = new AAssignSimpleStmt(tidNode2, tequalNode3, pexpNode4, tsemiNode5);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AArraySimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TId tidNode2;
        TLbracket tlbracketNode3;
        PExp pexpNode4;
        TRbracket trbracketNode5;
        TEqual tequalNode6;
        PExp pexpNode7;
        TSemi tsemiNode8;
        tidNode2 = (TId)nodeArrayList1.get(0);
        tlbracketNode3 = (TLbracket)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trbracketNode5 = (TRbracket)nodeArrayList4.get(0);
        tequalNode6 = (TEqual)nodeArrayList5.get(0);
        pexpNode7 = (PExp)nodeArrayList6.get(0);
        tsemiNode8 = (TSemi)nodeArrayList7.get(0);

        psimplestmtNode1 = new AArraySimpleStmt(tidNode2, tlbracketNode3, pexpNode4, trbracketNode5, tequalNode6, pexpNode7, tsemiNode8);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AAnestedsimplestmt1SimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TRbrace trbraceNode4;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        }
        trbraceNode4 = (TRbrace)nodeArrayList2.get(0);

        psimplestmtNode1 = new ANestedSimpleStmt(tlbraceNode2, listNode3, trbraceNode4);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAnestedsimplestmt2SimpleStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PSimpleStmt psimplestmtNode1;
        {
            // Block
        TLbrace tlbraceNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRbrace trbraceNode5;
        tlbraceNode2 = (TLbrace)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        trbraceNode5 = (TRbrace)nodeArrayList3.get(0);

        psimplestmtNode1 = new ANestedSimpleStmt(tlbraceNode2, listNode4, trbraceNode5);
        }
	nodeList.add(psimplestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ASansTrailerStmtAllPaired */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtAllPaired pstmtallpairedNode1;
        {
            // Block
        PSimpleStmt psimplestmtNode2;
        psimplestmtNode2 = (PSimpleStmt)nodeArrayList1.get(0);

        pstmtallpairedNode1 = new ASansTrailerStmtAllPaired(psimplestmtNode2);
        }
	nodeList.add(pstmtallpairedNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AWhileStmtAllPaired */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtAllPaired pstmtallpairedNode1;
        {
            // Block
        TWhile twhileNode2;
        TLparen tlparenNode3;
        PExp pexpNode4;
        TRparen trparenNode5;
        PStmtAllPaired pstmtallpairedNode6;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        pstmtallpairedNode6 = (PStmtAllPaired)nodeArrayList5.get(0);

        pstmtallpairedNode1 = new AWhileStmtAllPaired(twhileNode2, tlparenNode3, pexpNode4, trparenNode5, pstmtallpairedNode6);
        }
	nodeList.add(pstmtallpairedNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AIfStmtAllPaired */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtAllPaired pstmtallpairedNode1;
        {
            // Block
        TIf tifNode2;
        TLparen tlparenNode3;
        PExp pexpNode4;
        TRparen trparenNode5;
        PStmtAllPaired pstmtallpairedNode6;
        TElse telseNode7;
        PStmtAllPaired pstmtallpairedNode8;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        tlparenNode3 = (TLparen)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);
        pstmtallpairedNode6 = (PStmtAllPaired)nodeArrayList5.get(0);
        telseNode7 = (TElse)nodeArrayList6.get(0);
        pstmtallpairedNode8 = (PStmtAllPaired)nodeArrayList7.get(0);

        pstmtallpairedNode1 = new AIfStmtAllPaired(tifNode2, tlparenNode3, pexpNode4, trparenNode5, pstmtallpairedNode6, telseNode7, pstmtallpairedNode8);
        }
	nodeList.add(pstmtallpairedNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExp pexpNode1;
        {
            // Block
        PAndExp pandexpNode2;
        pandexpNode2 = (PAndExp)nodeArrayList1.get(0);

        pexpNode1 = new AExp(pandexpNode2);
        }
	nodeList.add(pexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ASimpleAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAndExp pandexpNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        pcomparisonNode2 = (PComparison)nodeArrayList1.get(0);

        pandexpNode1 = new ASimpleAndExp(pcomparisonNode2);
        }
	nodeList.add(pandexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AAndAndExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAndExp pandexpNode1;
        {
            // Block
        PAndExp pandexpNode2;
        TAnd tandNode3;
        PComparison pcomparisonNode4;
        pandexpNode2 = (PAndExp)nodeArrayList1.get(0);
        tandNode3 = (TAnd)nodeArrayList2.get(0);
        pcomparisonNode4 = (PComparison)nodeArrayList3.get(0);

        pandexpNode1 = new AAndAndExp(pandexpNode2, tandNode3, pcomparisonNode4);
        }
	nodeList.add(pandexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce ASimpleComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PArithExp parithexpNode2;
        parithexpNode2 = (PArithExp)nodeArrayList1.get(0);

        pcomparisonNode1 = new ASimpleComparison(parithexpNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ACompareComparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PArithExp parithexpNode2;
        TLess tlessNode3;
        PArithExp parithexpNode4;
        parithexpNode2 = (PArithExp)nodeArrayList1.get(0);
        tlessNode3 = (TLess)nodeArrayList2.get(0);
        parithexpNode4 = (PArithExp)nodeArrayList3.get(0);

        pcomparisonNode1 = new ACompareComparison(parithexpNode2, tlessNode3, parithexpNode4);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ASimpleArithExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArithExp parithexpNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        parithexpNode1 = new ASimpleArithExp(ptermNode2);
        }
	nodeList.add(parithexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AAddArithExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArithExp parithexpNode1;
        {
            // Block
        PArithExp parithexpNode2;
        TPlus tplusNode3;
        PTerm ptermNode4;
        parithexpNode2 = (PArithExp)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        parithexpNode1 = new AAddArithExp(parithexpNode2, tplusNode3, ptermNode4);
        }
	nodeList.add(parithexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ASubtArithExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArithExp parithexpNode1;
        {
            // Block
        PArithExp parithexpNode2;
        TMinus tminusNode3;
        PTerm ptermNode4;
        parithexpNode2 = (PArithExp)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        parithexpNode1 = new ASubtArithExp(parithexpNode2, tminusNode3, ptermNode4);
        }
	nodeList.add(parithexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ASimpleTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PBoolExp pboolexpNode2;
        pboolexpNode2 = (PBoolExp)nodeArrayList1.get(0);

        ptermNode1 = new ASimpleTerm(pboolexpNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ATimesTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        PTerm ptermNode2;
        TStar tstarNode3;
        PBoolExp pboolexpNode4;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        pboolexpNode4 = (PBoolExp)nodeArrayList3.get(0);

        ptermNode1 = new ATimesTerm(ptermNode2, tstarNode3, pboolexpNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ASimpleBoolExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolExp pboolexpNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pboolexpNode1 = new ASimpleBoolExp(pfactorNode2);
        }
	nodeList.add(pboolexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ANotBoolExp */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBoolExp pboolexpNode1;
        {
            // Block
        TBang tbangNode2;
        PBoolExp pboolexpNode3;
        tbangNode2 = (TBang)nodeArrayList1.get(0);
        pboolexpNode3 = (PBoolExp)nodeArrayList2.get(0);

        pboolexpNode1 = new ANotBoolExp(tbangNode2, pboolexpNode3);
        }
	nodeList.add(pboolexpNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AArrayFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TLbracket tlbracketNode3;
        PExp pexpNode4;
        TRbracket trbracketNode5;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tlbracketNode3 = (TLbracket)nodeArrayList2.get(0);
        pexpNode4 = (PExp)nodeArrayList3.get(0);
        trbracketNode5 = (TRbracket)nodeArrayList4.get(0);

        pfactorNode1 = new AArrayFactor(pfactorNode2, tlbracketNode3, pexpNode4, trbracketNode5);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ACallFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TDot tdotNode3;
        TId tidNode4;
        TLparen tlparenNode5;
        PExpList pexplistNode6;
        TRparen trparenNode7;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tdotNode3 = (TDot)nodeArrayList2.get(0);
        tidNode4 = (TId)nodeArrayList3.get(0);
        tlparenNode5 = (TLparen)nodeArrayList4.get(0);
        pexplistNode6 = (PExpList)nodeArrayList5.get(0);
        trparenNode7 = (TRparen)nodeArrayList6.get(0);

        pfactorNode1 = new ACallFactor(pfactorNode2, tdotNode3, tidNode4, tlparenNode5, pexplistNode6, trparenNode7);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ANumFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TNumber tnumberNode2;
        tnumberNode2 = (TNumber)nodeArrayList1.get(0);

        pfactorNode1 = new ANumFactor(tnumberNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ATrueFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pfactorNode1 = new ATrueFactor(ttrueNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AFalseFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pfactorNode1 = new AFalseFactor(tfalseNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AIdFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pfactorNode1 = new AIdFactor(tidNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AThisFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TThis tthisNode2;
        tthisNode2 = (TThis)nodeArrayList1.get(0);

        pfactorNode1 = new AThisFactor(tthisNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ANewarrayFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TNew tnewNode2;
        TInt tintNode3;
        TLbracket tlbracketNode4;
        PExp pexpNode5;
        TRbracket trbracketNode6;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tintNode3 = (TInt)nodeArrayList2.get(0);
        tlbracketNode4 = (TLbracket)nodeArrayList3.get(0);
        pexpNode5 = (PExp)nodeArrayList4.get(0);
        trbracketNode6 = (TRbracket)nodeArrayList5.get(0);

        pfactorNode1 = new ANewarrayFactor(tnewNode2, tintNode3, tlbracketNode4, pexpNode5, trbracketNode6);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ANewobjFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TNew tnewNode2;
        TId tidNode3;
        TLparen tlparenNode4;
        TRparen trparenNode5;
        tnewNode2 = (TNew)nodeArrayList1.get(0);
        tidNode3 = (TId)nodeArrayList2.get(0);
        tlparenNode4 = (TLparen)nodeArrayList3.get(0);
        trparenNode5 = (TRparen)nodeArrayList4.get(0);

        pfactorNode1 = new ANewobjFactor(tnewNode2, tidNode3, tlparenNode4, trparenNode5);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce ANestedFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        TLparen tlparenNode2;
        PExp pexpNode3;
        TRparen trparenNode4;
        tlparenNode2 = (TLparen)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        trparenNode4 = (TRparen)nodeArrayList3.get(0);

        pfactorNode1 = new ANestedFactor(tlparenNode2, pexpNode3, trparenNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AEmptyExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PExpList pexplistNode1;
        {
            // Block

        pexplistNode1 = new AEmptyExpList();
        }
	nodeList.add(pexplistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AExpsExpList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpList pexplistNode1;
        {
            // Block
        PExp pexpNode2;
        PExpRest pexprestNode3;
        pexpNode2 = (PExp)nodeArrayList1.get(0);
        pexprestNode3 = (PExpRest)nodeArrayList2.get(0);

        pexplistNode1 = new AExpsExpList(pexpNode2, pexprestNode3);
        }
	nodeList.add(pexplistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AEmptyExpRest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PExpRest pexprestNode1;
        {
            // Block

        pexprestNode1 = new AEmptyExpRest();
        }
	nodeList.add(pexprestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AExpsExpRest */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpRest pexprestNode1;
        {
            // Block
        TComma tcommaNode2;
        PExp pexpNode3;
        PExpRest pexprestNode4;
        tcommaNode2 = (TComma)nodeArrayList1.get(0);
        pexpNode3 = (PExp)nodeArrayList2.get(0);
        pexprestNode4 = (PExpRest)nodeArrayList3.get(0);

        pexprestNode1 = new AExpsExpRest(tcommaNode2, pexpNode3, pexprestNode4);
        }
	nodeList.add(pexprestNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ATerminal$ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClassDecl pclassdeclNode1;
        pclassdeclNode1 = (PClassDecl)nodeArrayList1.get(0);
	if(pclassdeclNode1 != null)
	{
	  listNode2.add(pclassdeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ANonTerminal$ClassDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PClassDecl pclassdeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassdeclNode2 = (PClassDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassdeclNode2 != null)
	{
	  listNode3.add(pclassdeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ATerminal$ClassVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PClassVarDecl pclassvardeclNode1;
        pclassvardeclNode1 = (PClassVarDecl)nodeArrayList1.get(0);
	if(pclassvardeclNode1 != null)
	{
	  listNode2.add(pclassvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANonTerminal$ClassVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PClassVarDecl pclassvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pclassvardeclNode2 = (PClassVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pclassvardeclNode2 != null)
	{
	  listNode3.add(pclassvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ATerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMethodDecl pmethoddeclNode1;
        pmethoddeclNode1 = (PMethodDecl)nodeArrayList1.get(0);
	if(pmethoddeclNode1 != null)
	{
	  listNode2.add(pmethoddeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ANonTerminal$MethodDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMethodDecl pmethoddeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmethoddeclNode2 = (PMethodDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmethoddeclNode2 != null)
	{
	  listNode3.add(pmethoddeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ATerminal$LocalVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLocalVarDecl plocalvardeclNode1;
        plocalvardeclNode1 = (PLocalVarDecl)nodeArrayList1.get(0);
	if(plocalvardeclNode1 != null)
	{
	  listNode2.add(plocalvardeclNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ANonTerminal$LocalVarDecl */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLocalVarDecl plocalvardeclNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocalvardeclNode2 = (PLocalVarDecl)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocalvardeclNode2 != null)
	{
	  listNode3.add(plocalvardeclNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStatement pstatementNode1;
        pstatementNode1 = (PStatement)nodeArrayList1.get(0);
	if(pstatementNode1 != null)
	{
	  listNode2.add(pstatementNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANonTerminal$Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStatement pstatementNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstatementNode2 = (PStatement)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstatementNode2 != null)
	{
	  listNode3.add(pstatementNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {1, SHIFT, 1}, },
			{{-1, ERROR, 1}, {33, SHIFT, 4}, },
			{{-1, ERROR, 2}, {35, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, {1, SHIFT, 5}, },
			{{-1, ERROR, 4}, {22, SHIFT, 8}, },
			{{-1, ERROR, 5}, {33, SHIFT, 9}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 1}, {1, SHIFT, 5}, },
			{{-1, ERROR, 8}, {9, SHIFT, 11}, },
			{{-1, ERROR, 9}, {22, SHIFT, 13}, },
			{{-1, REDUCE, 62}, },
			{{-1, ERROR, 11}, {11, SHIFT, 14}, },
			{{-1, ERROR, 12}, {23, SHIFT, 15}, },
			{{-1, ERROR, 13}, {0, SHIFT, 16}, {5, SHIFT, 17}, {9, SHIFT, 18}, {23, SHIFT, 19}, {33, SHIFT, 20}, },
			{{-1, ERROR, 14}, {15, SHIFT, 26}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 21}, {17, SHIFT, 27}, },
			{{-1, ERROR, 18}, {0, SHIFT, 16}, {5, SHIFT, 17}, {33, SHIFT, 20}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 23}, {33, SHIFT, 29}, },
			{{-1, ERROR, 24}, {0, SHIFT, 16}, {5, SHIFT, 17}, {9, SHIFT, 18}, {23, SHIFT, 30}, {33, SHIFT, 20}, },
			{{-1, ERROR, 25}, {9, SHIFT, 18}, {23, SHIFT, 33}, },
			{{-1, ERROR, 26}, {6, SHIFT, 35}, },
			{{-1, ERROR, 27}, {18, SHIFT, 36}, },
			{{-1, ERROR, 28}, {33, SHIFT, 37}, },
			{{-1, ERROR, 29}, {19, SHIFT, 38}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 64}, },
			{{-1, ERROR, 32}, {9, SHIFT, 18}, {23, SHIFT, 39}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 35}, {20, SHIFT, 40}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 37}, {20, SHIFT, 41}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 7}, },
			{{-1, ERROR, 40}, {12, SHIFT, 42}, },
			{{-1, REDUCE, 15}, {0, SHIFT, 16}, {5, SHIFT, 17}, {33, SHIFT, 20}, },
			{{-1, ERROR, 42}, {17, SHIFT, 45}, },
			{{-1, ERROR, 43}, {21, SHIFT, 46}, },
			{{-1, ERROR, 44}, {33, SHIFT, 47}, },
			{{-1, ERROR, 45}, {18, SHIFT, 48}, },
			{{-1, ERROR, 46}, {22, SHIFT, 49}, },
			{{-1, REDUCE, 17}, {27, SHIFT, 51}, },
			{{-1, ERROR, 48}, {33, SHIFT, 53}, },
			{{-1, ERROR, 49}, {0, SHIFT, 16}, {4, SHIFT, 54}, {5, SHIFT, 17}, {8, SHIFT, 55}, {10, SHIFT, 56}, {16, SHIFT, 57}, {22, SHIFT, 58}, {33, SHIFT, 59}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 51}, {0, SHIFT, 16}, {5, SHIFT, 17}, {33, SHIFT, 20}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 53}, {21, SHIFT, 67}, },
			{{-1, ERROR, 54}, {20, SHIFT, 68}, },
			{{-1, ERROR, 55}, {20, SHIFT, 69}, },
			{{-1, ERROR, 56}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 57}, {20, SHIFT, 85}, },
			{{-1, ERROR, 58}, {4, SHIFT, 54}, {8, SHIFT, 55}, {16, SHIFT, 57}, {22, SHIFT, 58}, {23, SHIFT, 86}, {33, SHIFT, 87}, },
			{{-1, REDUCE, 22}, {17, SHIFT, 89}, {24, SHIFT, 90}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 61}, {33, SHIFT, 91}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 64}, {0, SHIFT, 16}, {4, SHIFT, 54}, {5, SHIFT, 17}, {8, SHIFT, 55}, {10, SHIFT, 92}, {16, SHIFT, 57}, {22, SHIFT, 58}, {33, SHIFT, 59}, },
			{{-1, ERROR, 65}, {4, SHIFT, 54}, {8, SHIFT, 55}, {10, SHIFT, 95}, {16, SHIFT, 57}, {22, SHIFT, 58}, {33, SHIFT, 87}, },
			{{-1, ERROR, 66}, {33, SHIFT, 97}, },
			{{-1, ERROR, 67}, {22, SHIFT, 98}, },
			{{-1, ERROR, 68}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 69}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, REDUCE, 51}, },
			{{-1, ERROR, 71}, {5, SHIFT, 101}, {33, SHIFT, 102}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 74}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 75}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 49}, },
			{{-1, ERROR, 78}, {19, SHIFT, 105}, },
			{{-1, REDUCE, 35}, {29, SHIFT, 106}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 38}, {28, SHIFT, 107}, {30, SHIFT, 108}, {31, SHIFT, 109}, },
			{{-1, REDUCE, 40}, {32, SHIFT, 110}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 45}, {17, SHIFT, 111}, {25, SHIFT, 112}, },
			{{-1, ERROR, 85}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 87}, {17, SHIFT, 89}, {24, SHIFT, 90}, },
			{{-1, ERROR, 88}, {4, SHIFT, 54}, {8, SHIFT, 55}, {16, SHIFT, 57}, {22, SHIFT, 58}, {23, SHIFT, 114}, {33, SHIFT, 87}, },
			{{-1, ERROR, 89}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 90}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 91}, {19, SHIFT, 117}, },
			{{-1, ERROR, 92}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 94}, {4, SHIFT, 54}, {8, SHIFT, 55}, {10, SHIFT, 119}, {16, SHIFT, 57}, {22, SHIFT, 58}, {33, SHIFT, 87}, },
			{{-1, ERROR, 95}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 17}, {27, SHIFT, 51}, },
			{{-1, ERROR, 98}, {4, SHIFT, 54}, {8, SHIFT, 55}, {16, SHIFT, 57}, {22, SHIFT, 58}, {33, SHIFT, 87}, },
			{{-1, ERROR, 99}, {21, SHIFT, 123}, },
			{{-1, ERROR, 100}, {21, SHIFT, 124}, },
			{{-1, ERROR, 101}, {17, SHIFT, 125}, },
			{{-1, ERROR, 102}, {20, SHIFT, 126}, },
			{{-1, ERROR, 103}, {21, SHIFT, 127}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 105}, {23, SHIFT, 128}, },
			{{-1, ERROR, 106}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 107}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 108}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 109}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 110}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 111}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 112}, {33, SHIFT, 135}, },
			{{-1, ERROR, 113}, {21, SHIFT, 136}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 115}, {18, SHIFT, 137}, },
			{{-1, ERROR, 116}, {19, SHIFT, 138}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 118}, {19, SHIFT, 139}, },
			{{-1, ERROR, 119}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 120}, {19, SHIFT, 141}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 122}, {23, SHIFT, 142}, },
			{{-1, ERROR, 123}, {4, SHIFT, 143}, {8, SHIFT, 55}, {16, SHIFT, 144}, {22, SHIFT, 58}, {33, SHIFT, 87}, },
			{{-1, ERROR, 124}, {19, SHIFT, 148}, },
			{{-1, ERROR, 125}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 126}, {21, SHIFT, 150}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 41}, {32, SHIFT, 110}, },
			{{-1, REDUCE, 39}, {28, SHIFT, 107}, {31, SHIFT, 109}, },
			{{-1, REDUCE, 42}, {32, SHIFT, 110}, },
			{{-1, REDUCE, 44}, },
			{{-1, ERROR, 134}, {18, SHIFT, 151}, },
			{{-1, ERROR, 135}, {20, SHIFT, 152}, },
			{{-1, ERROR, 136}, {4, SHIFT, 54}, {8, SHIFT, 55}, {16, SHIFT, 57}, {22, SHIFT, 58}, {33, SHIFT, 87}, },
			{{-1, ERROR, 137}, {24, SHIFT, 154}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 139}, {23, SHIFT, 155}, },
			{{-1, ERROR, 140}, {19, SHIFT, 156}, },
			{{-1, ERROR, 141}, {23, SHIFT, 157}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 143}, {20, SHIFT, 158}, },
			{{-1, ERROR, 144}, {20, SHIFT, 159}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 26}, {2, REDUCE, 32}, },
			{{-1, ERROR, 147}, {2, SHIFT, 160}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 149}, {18, SHIFT, 161}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 57}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 154}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, REDUCE, 12}, },
			{{-1, ERROR, 156}, {23, SHIFT, 165}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 158}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 159}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, ERROR, 160}, {4, SHIFT, 54}, {8, SHIFT, 55}, {16, SHIFT, 57}, {22, SHIFT, 58}, {33, SHIFT, 87}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 59}, {27, SHIFT, 169}, },
			{{-1, ERROR, 163}, {21, SHIFT, 171}, },
			{{-1, ERROR, 164}, {19, SHIFT, 172}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 166}, {21, SHIFT, 173}, },
			{{-1, ERROR, 167}, {21, SHIFT, 174}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 169}, {3, SHIFT, 70}, {7, SHIFT, 71}, {13, SHIFT, 72}, {14, SHIFT, 73}, {20, SHIFT, 74}, {26, SHIFT, 75}, {33, SHIFT, 76}, {34, SHIFT, 77}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 29}, },
			{{-1, ERROR, 173}, {4, SHIFT, 143}, {8, SHIFT, 55}, {16, SHIFT, 144}, {22, SHIFT, 58}, {33, SHIFT, 87}, },
			{{-1, ERROR, 174}, {4, SHIFT, 143}, {8, SHIFT, 55}, {16, SHIFT, 144}, {22, SHIFT, 58}, {33, SHIFT, 87}, },
			{{-1, REDUCE, 59}, {27, SHIFT, 169}, },
			{{-1, ERROR, 176}, {2, SHIFT, 179}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 179}, {4, SHIFT, 143}, {8, SHIFT, 55}, {16, SHIFT, 144}, {22, SHIFT, 58}, {33, SHIFT, 87}, },
			{{-1, REDUCE, 34}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 12}, },
			{{-1, 6}, {7, 10}, },
			{{-1, 21}, {24, 31}, },
			{{-1, 60}, {64, 93}, },
			{{-1, 22}, {25, 34}, {32, 34}, },
			{{-1, 50}, },
			{{-1, 43}, },
			{{-1, 52}, {97, 121}, },
			{{-1, 23}, {18, 28}, {41, 44}, {49, 61}, {51, 66}, {64, 61}, },
			{{-1, 62}, {65, 96}, {88, 96}, {94, 96}, {98, 122}, {123, 145}, {136, 153}, {160, 168}, {173, 145}, {174, 153}, {179, 168}, },
			{{-1, 63}, {123, 146}, {173, 146}, {174, 146}, {179, 146}, },
			{{-1, 147}, {173, 176}, {174, 177}, {179, 180}, },
			{{-1, 78}, {68, 99}, {69, 100}, {74, 103}, {85, 113}, {89, 115}, {90, 116}, {92, 118}, {95, 120}, {111, 134}, {119, 140}, {125, 149}, {152, 162}, {154, 164}, {158, 166}, {159, 167}, {169, 175}, },
			{{-1, 79}, },
			{{-1, 80}, {106, 129}, },
			{{-1, 81}, {108, 131}, },
			{{-1, 82}, {107, 130}, {109, 132}, },
			{{-1, 83}, {75, 104}, {110, 133}, },
			{{-1, 84}, },
			{{-1, 163}, },
			{{-1, 170}, {175, 178}, },
			{{-1, 7}, },
			{{-1, 24}, },
			{{-1, 25}, {24, 32}, },
			{{-1, 64}, },
			{{-1, 65}, {58, 88}, {64, 94}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'class'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'class', EOF",
			"expecting: '{'",
			"expecting: 'public'",
			"expecting: 'static'",
			"expecting: '}'",
			"expecting: 'boolean', 'int', 'public', '}', id",
			"expecting: 'void'",
			"expecting: '[', id",
			"expecting: 'boolean', 'int', id",
			"expecting: 'public', '}'",
			"expecting: 'main'",
			"expecting: ']'",
			"expecting: ';'",
			"expecting: '('",
			"expecting: 'String'",
			"expecting: 'boolean', 'int', ')', id",
			"expecting: '['",
			"expecting: ')'",
			"expecting: ')', ','",
			"expecting: 'boolean', 'if', 'int', 'System.out.println', 'return', 'while', '{', id",
			"expecting: 'false', 'new', 'this', 'true', '(', '!', id, number",
			"expecting: 'if', 'System.out.println', 'while', '{', '}', id",
			"expecting: '[', '=', id",
			"expecting: 'if', 'System.out.println', 'return', 'while', '{', '}', id",
			"expecting: 'if', 'System.out.println', 'return', 'while', '{', id",
			"expecting: '[', ']', ';', ')', '.', ',', '+', '&&', '<', '-', '*'",
			"expecting: 'int', id",
			"expecting: ']', ';', ')', ',', '&&'",
			"expecting: ']', ';', ')', ',', '+', '&&', '<', '-'",
			"expecting: ']', ';', ')', ',', '+', '&&', '<', '-', '*'",
			"expecting: 'else', 'if', 'System.out.println', 'return', 'while', '{', '}', id",
			"expecting: '[', '='",
			"expecting: 'if', 'System.out.println', 'while', '{', id",
			"expecting: ']', ';', ')', ',', '+', '&&', '-'",
			"expecting: '='",
			"expecting: 'else'",
			"expecting: 'false', 'new', 'this', 'true', '(', ')', '!', id, number",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 1, 3, 3, 5, 4, 3, 6, 7, 8, 9, 3, 1, 10, 11, 3, 1, 8, 12, 1, 8, 12, 13, 14, 1, 15, 3, 8, 12, 3, 12, 16, 1, 16, 8, 3, 17, 18, 19, 20, 1, 14, 4, 21, 1, 22, 12, 11, 20, 20, 16, 16, 23, 16, 24, 25, 22, 1, 26, 26, 22, 27, 1, 4, 23, 23, 28, 29, 28, 28, 23, 23, 28, 28, 15, 30, 30, 31, 32, 32, 28, 23, 33, 34, 24, 23, 23, 15, 23, 22, 27, 23, 26, 21, 35, 20, 20, 19, 16, 20, 32, 7, 23, 23, 23, 23, 23, 23, 1, 20, 33, 14, 15, 22, 15, 23, 15, 20, 7, 35, 15, 23, 20, 28, 12, 30, 32, 36, 32, 32, 14, 16, 35, 37, 33, 7, 15, 7, 7, 16, 16, 26, 33, 38, 33, 14, 28, 28, 39, 26, 23, 12, 7, 12, 23, 23, 35, 28, 21, 20, 15, 12, 20, 20, 26, 23, 20, 28, 33, 35, 35, 21, 38, 38, 20, 35, 38, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
